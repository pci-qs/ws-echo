// Generated by CoffeeScript 1.7.1
(function() {
  var CORSify, WebSocketServer, express, http, log, logError, on_request, pkg, websocket;

  http = require("http");

  express = require("express");

  websocket = require("websocket");

  WebSocketServer = websocket.server;

  pkg = require("../package.json");

  exports.main = function() {
    var app, port, server, wsServer;
    if (process.env.PORT == null) {
      logError("PORT environment variable not set");
    }
    port = parseInt(process.env.PORT);
    if (isNaN(port)) {
      logError("invalid PORT environment variable: " + process.env.PORT);
    }
    app = express();
    app.use(express["static"]("www"));
    server = http.createServer(app);
    server.listen(port, function() {
      return log("server started: http://localhost:" + port);
    });
    wsServer = new WebSocketServer({
      httpServer: server
    });
    return wsServer.on("request", function(request) {
      return on_request(request);
    });
  };

  on_request = function(request) {
    var connection;
    log("connection from origin: " + request.origin);
    connection = request.accept(null, request.origin);
    connection.on("message", function(message) {
      if (message.type === "utf8") {
        log("received message: " + message.utf8Data);
        return connection.sendUTF(message.utf8Data);
      } else if (message.type === "binary") {
        log("received binary message of " + message.binaryData.length + " bytes");
        return connection.sendBytes(message.binaryData);
      }
    });
    return connection.on("close", function(reasonCode, description) {
      return log("peer " + connection.remoteAddress + " disconnected.");
    });
  };

  log = function(message) {
    return console.log("" + pkg.name + ": " + message);
  };

  logError = function(message) {
    log(message);
    return process.exit(1);
  };

  CORSify = function(request, response, next) {
    response.header("Access-Control-Allow-Origin:", "*");
    response.header("Access-Control-Allow-Methods", "POST, GET,");
    return next();
  };

}).call(this);
